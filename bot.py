import logging
import os
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import yt_dlp
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    print("–ü–æ–º–∏–ª–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
else:
    print(f"–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:10]}...")  # –ü–µ—á–∞—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ—é BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó –∑–æ–Ω–∏
timezone = pytz.timezone("UTC")

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    keyboard = [[InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='start')]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –º–æ–∂—É —Å–∫–∞—á—É–≤–∞—Ç–∏ –≤—ñ–¥–µ–æ –∑ YouTube. –ù–∞—Ç–∏—Å–Ω–∏ '–°—Ç–∞—Ä—Ç', —â–æ–± –ø–æ—á–∞—Ç–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start':
        await query.edit_message_text("‚úÖ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ YouTube")
        context.user_data['state'] = 'awaiting_link'

# –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å–∏–ª–∞–Ω—å"""
    if not context.user_data.get('state') == 'awaiting_link':
        return
    
    link = update.message.text.strip()
    context.user_data['link'] = link
    
    keyboard = [
        [InlineKeyboardButton("üé¨ –í—ñ–¥–µ–æ", callback_data='video'),
         InlineKeyboardButton("üéµ –ê—É–¥—ñ–æ", callback_data='audio')],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel')]
    ]
    
    await update.message.reply_text(
        f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ: {link}\n–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞
async def download_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'cancel':
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    link = context.user_data.get('link')
    if not link:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    try:
        ydl_opts = {
            'format': 'bestvideo+bestaudio/best' if query.data == 'video' else 'bestaudio',
            'outtmpl': 'download.%(ext)s',
            'quiet': True
        }
        
        await query.edit_message_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é..." + (" –≤—ñ–¥–µ–æ" if query.data == 'video' else " –∞—É–¥—ñ–æ"))
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(link, download=True)
            filename = ydl.prepare_filename(info)
        
        await query.message.reply_document(open(filename, 'rb'))
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è: {e}")
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button, pattern='^start$'))
    application.add_handler(CallbackQueryHandler(download_media, pattern='^(video|audio|cancel)$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    
    application.run_polling()

if __name__ == "__main__":
    main()

