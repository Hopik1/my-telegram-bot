import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import yt_dlp
from dotenv import load_dotenv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [[InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='start')]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube. –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start':
        await query.edit_message_text("‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ")
        context.user_data['state'] = 'awaiting_link'

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫"""
    if not context.user_data.get('state') == 'awaiting_link':
        return
    
    link = update.message.text.strip()
    context.user_data['link'] = link
    
    keyboard = [
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='video'),
         InlineKeyboardButton("üéµ –ê—É–¥–∏–æ", callback_data='audio')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    
    await update.message.reply_text(
        f"üîó –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {link}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def download_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'cancel':
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    link = context.user_data.get('link')
    if not link:
        await query.edit_message_text("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        ydl_opts = {
            'format': 'bestvideo+bestaudio/best' if query.data == 'video' else 'bestaudio',
            'outtmpl': 'download.%(ext)s',
            'quiet': True
        }
        
        await query.edit_message_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é..." + (" –≤–∏–¥–µ–æ" if query.data == 'video' else " –∞—É–¥–∏–æ"))
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(link, download=True)
            filename = ydl.prepare_filename(info)
        
        await query.message.reply_document(open(filename, 'rb'))
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button, pattern='^start$'))
    application.add_handler(CallbackQueryHandler(download_media, pattern='^(video|audio|cancel)$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    
    application.run_polling()

if __name__ == "__main__":
    main()
