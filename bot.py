import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import yt_dlp

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
TOKEN = '7995559692:AAGlwHR4Q2lklof6O2xgbIjollFZh3MEJaw'

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç'."""
    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    if query.data == 'start':
        await query.edit_message_text(text="‚úÖ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏
        await query.message.reply_text("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π."""
    link = update.message.text.strip()
    context.user_data["link"] = link  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É

    keyboard = [
        [InlineKeyboardButton("üé¨ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video")],
        [InlineKeyboardButton("üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", callback_data="audio")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    await update.message.reply_text(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:\n`{link}`\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    link = context.user_data.get("link")
    if not link:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    if query.data == "video":
        await query.edit_message_text("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        await download_youtube(query, link, video=True)

    elif query.data == "audio":
        await query.edit_message_text("üéµ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...")
        await download_youtube(query, link, video=False)

    elif query.data == "cancel":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ
async def download_youtube(query, link, video=True):
    filename = "output.mp4" if video else "output.mp3"
    ydl_opts = {
        'format': 'bestvideo+bestaudio/best' if video else 'bestaudio',
        'outtmpl': filename,
        'quiet': True,
        'merge_output_format': 'mp4' if video else 'mp3',
    }

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt_dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([link])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(filename, 'rb') as f:
            await query.message.reply_document(f, filename=filename)

    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
    finally:
        if os.path.exists(filename):
            os.remove(filename)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≥–¥–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def main():
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
